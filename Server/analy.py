import time
import boto3
import paramiko
from flask import Flask,request,jsonify
import os
app =Flask(__name__)

S3_REGION = 'us-east-2'
S3_BUCKET="bucket1vaishnavi"
EC2_INSTANCE_ID = 'i-0f456d806359e59c7'
EC2_USERNAME = 'ubuntu'
EC2_PRIVATE_KEY_FILE = 'hostpair.pem'
def get_ec2_instance_public_ip(instance_id):
    ec2_client = boto3.client('ec2')
    
    while True:
        response = ec2_client.describe_instances(InstanceIds=[instance_id])
        
        try:
            state = response['Reservations'][0]['Instances'][0]['State']['Name']
            if state == 'running':
                public_ip = response['Reservations'][0]['Instances'][0]['PublicIpAddress']
                if public_ip:
                    return public_ip
                else:
                    print("Public IP address is not available yet.")
            elif state == 'pending':
                print("Instance is still in the pending state. Waiting...")
                time.sleep(5)  # Delay for 5 seconds before checking again
            else:
                print(f"Instance is in {state} state. Unable to retrieve the public IP address.")
                return None
        except KeyError:
            print("KeyError: Unable to retrieve the public IP address.")
            print(response)  # Print the response for debugging purposes
            return None
def start_ec2_instance(instance_id):
    ec2_client = boto3.client('ec2')
    response = ec2_client.start_instances(InstanceIds=[instance_id])
    print(response)





def stop_ec2_instance(instance_id):
    ec2_client = boto3.client('ec2')
    response = ec2_client.stop_instances(InstanceIds=[instance_id])
    print(response)



s3_client = boto3.client('s3', region_name=S3_REGION)

def upload_file_to_s3(file, file_name):
                    start_ec2_instance(EC2_INSTANCE_ID)
                    s3_client.upload_fileobj(file, S3_BUCKET, file_name)
                    s3_file_url = f"https://{S3_BUCKET}.s3.{S3_REGION}.amazonaws.com/{file_name}"
                    return s3_file_url

@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        file = request.files['file']

        if file:
            # Save the file to S3
            global file_name 
            file_name=file.filename
           # s3_file_url = upload_file_to_s3(file, file_name)

            print("File uploaded to S3 successfully.")

            EC2_INSTANCE_IP = get_ec2_instance_public_ip(EC2_INSTANCE_ID)
            if EC2_INSTANCE_IP:

                    


                    # cmd1 = f"aws s3 cp s3://bucket1vaishnavi/{file_name} /home/ubuntu"
                    cmd1="touch new.txt"
                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(EC2_INSTANCE_IP, username=EC2_USERNAME, key_filename=EC2_PRIVATE_KEY_FILE)
                    stdin, stdout, stderr = ssh.exec_command(cmd1)
                   

                    output = stdout.read().decode().strip()
                    ssh.close()

                   
                    
            return jsonify({'message': 'File uploaded to S3  '} )   #, 's3_file_url': s3_file_url})
        else:
            return jsonify({'message': 'No file selected.'})

    except Exception as e:
        print("Error during file upload:", str(e))
        return jsonify({'message': 'An error occurred during file upload.'})


@app.route('/analyse', methods=['POST'])
def analyse_file():
   
                # Run the bash script in EC2 instance
                EC2_INSTANCE_IP = get_ec2_instance_public_ip(EC2_INSTANCE_ID)
                if EC2_INSTANCE_IP:

                    cmd1 = f"bash bash1.sh"
                    

                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(EC2_INSTANCE_IP, username=EC2_USERNAME, key_filename=EC2_PRIVATE_KEY_FILE)
                    stdin, stdout, stderr = ssh.exec_command(cmd1)
                    
                   

                    output = stdout.read().decode().strip()
                    ssh.close()

                   
                    
                    return jsonify({'message': 'File analyzed successfully.'})

@app.route('/result', methods=['POST'])
def result():
   
                # Run the bash script in EC2 instance
                EC2_INSTANCE_IP = get_ec2_instance_public_ip(EC2_INSTANCE_ID)
                if EC2_INSTANCE_IP:
                    
                    cmd2 = 'python3 predict.py'

                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(EC2_INSTANCE_IP, username=EC2_USERNAME, key_filename=EC2_PRIVATE_KEY_FILE)
                  
                    stdin, stdout, stderr = ssh.exec_command(cmd2)

                    output = stdout.read().decode().strip()
                    ssh.close()

                    # Process the output
                    
                    #stop_instance()
                    # Store the result or perform any additional processing
                    if output=='[1]':
                        print("Malware")
                    elif(output=='[0]'):
                        print("Benign")
                    
                    return jsonify({'message': 'Completed Successfully.', 'output':output})





if __name__ == '__main__':
    app.run(host='0.0.0.0')
